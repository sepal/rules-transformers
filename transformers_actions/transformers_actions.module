<?php
// $Id: transformers_actions.module,v 1.1.2.1 2010/06/14 14:15:39 sgilits Exp $


/**
 * @file Transformers Actions
 */

/**
 * Returns the value from the called column from csv data.
 * The functions returns the entry corresponding to the called column, which
 * is only metadata.
 * So if for example <em>csv:1:firstColumn</em> is called it will search for
 * the data for the collumn <em>firstColumn</em>.
 */
function transformers_actions_metadata_wrapper_csv_getter($data, $options, $name, $data_type, $info) {
  // This
  $csv_info = $info['parent']->info();
  $column_key = array_keys($csv_info['property info']);
  $index = array_search($name, $column_key, TRUE);
  return $data[$index];
}

/**
 * Returns the value from a xml metadata
 */
function transformers_actions_metadata_wrapper_xml_getter($data, $options, $name, $data_type, $info) {
  $xml_info = $info['parent']->info();
  $return = NULL;
  foreach ($xml_info['property info'] as $key => $info) {
    if ($key === $name) {
      switch ($info['metatype']) {
        case 'Attribute':
          $return = $data->attributes->getNamedItem($name)->value;
          break;
        case 'Text':
          $return = trim($data->textContent);
          break;
      }
    }
  }

  return $return;
}

/**
 * UI for metadata
 */
class TransformersActionsMetadataUI extends RulesDataUIText {
  /**
   * Returns an array of options to use with a select for the items specified
   * in the given hook.
   */
  public static function getOptions($hook) {
    $sorted_data = array();
    $data = rules_fetch_data($hook);
    foreach ($data as $name => $set) {
      $sorted_data[$name] = $set['label'];
    }
    asort($sorted_data);
    return $sorted_data;
  }

  public static function inputForm($name, $info, $settings, RulesPlugin $element) {
    $options = array_map('drupal_ucfirst', TransformersActionsMetadataUI::getOptions('data_info'));
    for ($i=0; $i<=5; $i++) {
      $form[$name][$i] = array(
        '#type' => 'fieldset',
        '#title' => t('@index. column', array('@index' => $i+1)),
        '#collapsible' => FALSE,
      );
      $form[$name][$i]['type'] = array(
        '#type' => 'select',
        '#title' => t('Data type'),
        '#options' => array(0 => '--') + $options,
        '#default_value' => (isset($settings[$name][$i]['type']) ? $settings[$name][$i]['type'] : 0),
      );
      $form[$name][$i]['label'] = array(
        '#type' => 'textfield',
        '#title' => t('Label'),
        '#default_value' => (isset($settings[$name][$i]['label']) ? $settings[$name][$i]['label'] : ''),
      );
      if (isset($info['metatypes']) && $info['metatypes'] == TRUE) {
        $form[$name][$i]['metatype'] = array(
          '#type' => 'textfield',
          '#title' => t('Metatype'),
          '#default_value' => (isset($settings[$name][$i]['metatype']) ? $settings[$name][$i]['metatype'] : ''),
        );
      }
    }
    return $form;
  }

  public static function render($value) {
  }
}



/**
 * DomNodeList to array
 */
function nodelist2array(DOMNodeList $nodelist) {
  $array = array();
  foreach ($nodelist as $item) {
    $array[] = $item;
  }
  return $array;
}

